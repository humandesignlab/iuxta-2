{"version":3,"file":"static/webpack/static/development/pages/index.js.9814fc3b5ef8cd545132.hot-update.js","sources":["webpack:///./components/Content.js"],"sourcesContent":["import React, { Component } from \"react\";\nimport {\n  Responsive,\n  Container,\n  Segment,\n  Grid,\n  List,\n  Menu,\n  Dropdown,\n  Input,\n  Button,\n  Header,\n  Icon,\n  Modal,\n  Table\n} from \"semantic-ui-react\";\nimport StuffList from \"./StuffList\";\nimport PropTypes from \"prop-types\";\nimport { connect } from \"react-redux\";\nimport { bindActionCreators } from \"redux\";\nimport * as stuffActions from \"../store\";\nimport moment from \"moment\";\n\nclass Content extends Component {\n  state = {\n    lookup: this.props.lookup,\n    thisMoment: moment().format(\"LLLL\")\n  };\n  updateInputValue = evt => {\n    this.setState({\n      inputValue: evt.target.value\n    });\n  };\n\n  handleSearchSubmit = () => {\n    this.props.stuffActions.fetchStuff(this.state.inputValue);\n  };\n\n  updateProps = async () => {\n    const updatedProps = await this.props.stuffActions.updateProps(\n      this.props.stuff,\n      this.props.lookup\n    );\n    this.setState({\n      lookup: updatedProps\n    });\n  };\n\n  handleChange = async (e, data) => {\n    if (this.props.lookup.includes(data.value)) {\n      for (var i = this.props.lookup.length - 1; i >= 0; i--) {\n        if (this.props.lookup[i] === data.value) {\n          this.props.lookup.splice(i, 1);\n        }\n      }\n      this.updateProps();\n      console.log(this.props);\n    } else {\n      this.props.lookup.push(data.value);\n      this.updateProps();\n      console.log(\"this.props Content\", this.props);\n    }\n  };\n\n  handleLookupSubmit = () => {\n    let asinArray = [];\n\n    this.props.lookup.map(item => {\n      asinArray.push(item.asin);\n    });\n\n    const lookupParams = JSON.stringify(asinArray).replace(/[\\[\\]\"]+/g, \"\");\n    console.log(\"lookupParams \", lookupParams);\n    this.props.stuffActions.lookupStuff(lookupParams);\n  };\n\n  renderMenu = () => {\n    return (\n      <Menu stackable className=\"fixed\">\n        <Menu.Item className=\"item\">Iuxta</Menu.Item>\n        <Menu.Item>\n          <Modal\n            size=\"large\"\n            trigger={<Button>Export Selected Items Data</Button>}\n          >\n            <Modal.Header>Export Data</Modal.Header>\n            <Modal.Content image scrolling>\n              <Modal.Description>\n                <Header>Selected Items to Export</Header>\n                {this.renderLookupData()}\n              </Modal.Description>\n            </Modal.Content>\n            <Modal.Actions>\n              <Button primary onClick={this.handleLookupSubmit}>\n                <Icon name=\"download\" />\n                Download CSV\n              </Button>\n            </Modal.Actions>\n          </Modal>\n        </Menu.Item>\n        <Menu.Menu position=\"right\">\n          <Menu.Item>\n            <Input\n              type=\"text\"\n              placeholder=\"Search...\"\n              action\n              onChange={this.updateInputValue}\n            >\n              <input />\n              <Button type=\"submit\" onClick={this.handleSearchSubmit}>\n                Search\n              </Button>\n            </Input>\n          </Menu.Item>\n        </Menu.Menu>\n      </Menu>\n    );\n  };\n\n  renderList = () => {\n    return this.props.lookup.length > 0\n      ? this.props.lookup.map((item, index) => {\n          return (\n            <div>\n              {index + 1}\n              <List.Item key={index}>{item.title}</List.Item>\n              <Button negative size=\"mini\">\n                {\" \"}\n                Remove{\" \"}\n              </Button>\n            </div>\n          );\n        })\n      : \"Empty List\";\n  };\n\n  renderLookupData = () => {\n    console.log(\"this.props in renderLookupData Content \", this.props);\n    return (\n      <Table compact celled>\n        <Table.Header>\n          <Table.Row>\n            <Table.HeaderCell />\n            <Table.HeaderCell>EAN</Table.HeaderCell>\n            <Table.HeaderCell>Title</Table.HeaderCell>\n            <Table.HeaderCell>Price</Table.HeaderCell>\n            <Table.HeaderCell>Search Date</Table.HeaderCell>\n          </Table.Row>\n        </Table.Header>\n        <Table.Body>\n          {this.props.lookup !== undefined && this.props.lookup.length > 0 ? (\n            this.props.lookup.map((item, index) => {\n              return (\n                <Table.Row key={index}>\n                  <Table.Cell>{index + 1}</Table.Cell>\n                  <Table.Cell>{item.ean}</Table.Cell>\n                  <Table.Cell>{item.title}</Table.Cell>\n                  <Table.Cell>{item.price}</Table.Cell>\n                  <Table.Cell>{this.state.thisMoment}</Table.Cell>\n                </Table.Row>\n              );\n            })\n          ) : (\n            <Table.Row>\n              <Table.Cell>No Data</Table.Cell>\n            </Table.Row>\n          )}\n        </Table.Body>\n      </Table>\n    );\n  };\n\n  render() {\n    return (\n      <div>\n        <Responsive\n          as={Container}\n          minWidth={320}\n          maxWidth={991}\n          style={{ marginTop: \"140px\" }}\n        >\n          {this.renderMenu()}\n          <Segment>\n            <List>{this.renderList()}</List>\n          </Segment>\n          <Segment>\n            <StuffList handleChange={this.handleChange} />\n          </Segment>\n        </Responsive>\n        <Responsive\n          as={Container}\n          {...Responsive.onlyComputer}\n          style={{ marginTop: \"60px\" }}\n        >\n          <Grid columns=\"equal\">\n            {this.renderMenu()}\n            <Grid.Column>\n              <Segment>\n                <List>{this.renderList()}</List>\n              </Segment>\n            </Grid.Column>\n            <Grid.Column width={12}>\n              <Segment>\n                <StuffList handleChange={this.handleChange} />\n              </Segment>\n            </Grid.Column>\n          </Grid>\n        </Responsive>\n      </div>\n    );\n  }\n}\n\nContent.propTypes = {\n  stuffActions: PropTypes.object,\n  stuff: PropTypes.array,\n  lookup: PropTypes.array\n};\n\nfunction mapStateToProps(state) {\n  return {\n    stuff: state.stuff,\n    lookup: state.lookup\n  };\n}\n\nfunction mapDispatchToProps(dispatch) {\n  return {\n    stuffActions: bindActionCreators(stuffActions, dispatch)\n  };\n}\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(Content);\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AAeA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;AACA;AACA;AACA;AAFA;AACA;AAGA;AACA;AACA;AADA;AAGA;AACA;AACA;AACA;AACA;AACA;;;;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AACA;AACA;AAGA;AACA;AADA;AACA;AANA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;;;;;;AASA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;AACA;AAdA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;;;;;;AAeA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AAGA;AACA;AAFA;AAKA;AAAA;AAAA;AAOA;AAAA;AAAA;AACA;AAAA;AAMA;AAAA;AAGA;AACA;AACA;AACA;AAJA;AAOA;AAAA;AAAA;AAQA;AACA;AACA;AACA;AAEA;AAGA;AAAA;AACA;AAAA;AAAA;AAMA;AAEA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAaA;AACA;AAAA;AAQA;AASA;AACA;;;;;;AACA;AACA;AAGA;AACA;AACA;AACA;AAAA;AAAA;AAJA;AAWA;AAAA;AAIA;AADA;AAGA;AAAA;AAAA;AAHA;AAKA;AAAA;AAOA;AAAA;AAEA;AAAA;AAOA;;;;AA3LA;AACA;AA6LA;AACA;AACA;AACA;AAHA;AACA;AAKA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AACA;AACA;AADA;AAGA;AACA;AACA;;;;A","sourceRoot":""}